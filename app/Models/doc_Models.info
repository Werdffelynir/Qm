-- Описание Каталога Models
-- Создание новых моделей


Модель предназначина для формирования структуры запросов для ваших преложений, принцип тот же чтои в других фреймворках
так что обойдемся без обяснения елементарных принципов.


Внутри.
Стандартно для работы с базой данных используеться средства PHP обект PDO, он вложен в две обертки и абстрактный класс Model.
Первая обертка PDO это SafePDO - безопасное соединение и запросы, предотвращает изнанку данных при ошибках.
Вторая обертка SimplePDO обезпечивает подключение к базе данных и несколько методов для елементарных конструкций SQL запросов,
создает соединение которое и используеться в наших моделях.
Основные методы SimplePDO:


Свойства
public $dbh; // Содержит обект соединение к БД
public $sth; // Содержит временные запросы внутренней работы класса


// Подключение модели и доступ к соединению с контролера
$model  = $this->model("myModel");
$result = $model->db->exec($sql)

// Доступ к соединению с модели
$result = $this->db->exec($sql);

// Стандартный метод через обертку, принимает стандартный sql запрос
exec($sql)

// Использует стандартный метод execute() через обертку, принимает sql запрос,
// или если указан второй параметр происходит выполнение через метод prepare()
// возвращает екземпляр обекта.
query($sql, array $data=null)

// Еквивалентен методу query() но возвращает результат количество сознаненных записей.
update($sql, array $data=null)

// Выбирает строку с БД, используеться после query()->row();
// Выберает типы: assoc, class, obj
row($type="assoc")

// Выбирает несколько строк с БД, используеться после query()->row();
// Выберает типы: assoc, class, obj
all($type="assoc")

// Закрывает содинение
close()


Подробное описание в комментариях кода.



Соединение с базой данных.
Чтобы создать соединение с базой данных нужно прописать настройки в конфиг-файле configuration.php активного преложения:

// Испольывание драйвера mysql
"db" => array(
    "driver"    => "mysql",     // имя драйвера
    "class"     => "SimplePDO", // класс который ипользуеться
    "host"      => "localhost", // с названий все понятно должно быть
    "dbName"    => "db_blog",   // ...
    "user"      => "root",      // ...
    "password"  => "",          // ...
),

// Испольывание драйвера sqlite
"db" => array(
    "driver"  => "sqlite",
    "class"   => "SimplePDO",
    "path"    => dirname(__DIR__)."/lib/DATABASE/QmDataBase.sqlite", // путь к файлу базы данных
),



Использувание.
Создание запросов происходит стандартными методами PDO, он достаточно прост и безопасен, все тонкости работы с PDO
расписаны на официальном сайте php.net.
В фреймворке модели наследуються от радительского класса Model который также как и обертка SimplePDO содержит несколько простых
конструкций для расширеных SQL запросов. Опишу их:

Свойство "public $db" содержит обект соединения с БД обращение к все методам SimplePDO происходят через него.


// Подключение модели и доступ к соединению с контролера
$model  = $this->model("myModel");
$result = $model->getAll($params);

// Доступ к соединению с модели
$result = $this->getAll($params);

// Выберает все записи с указаной таблицы.
getAll($tbl, $data=null)

// Выберает все с указаной таблицы по id
getById($tbl, $id, $data=null)

// Выберает одну запись с указаной таблицы по названию колонки
getByAttr($tbl, $attr, $attrVal, $data=null)

// Выберает все записи с указаной таблицы по названию колонки
getAllByAttr($tbl, $attr, $attrVal, $data=null)

Каждый метод имеет не обезательный аргумент $data он может быть строкой или массивом параметров
название колонок которые выбераються по умолчанию происходит выборка SELECT * ...
Например:
// Выберает колонки "title, content, author" с таблицы "table" если колонка "column" имеет значение "column_value"
$this->getByAttr("table", "column", "column_value", "title, content, author");
// То же что и выше
$this->getByAttr("table", "column", "column_value", array(
     "title",
     "content",
     "author"
));














